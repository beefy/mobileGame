/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/
"use strict";

var fs = tryRequire('fs'),
    path = tryRequire('path'),
    Q = tryRequire('q'),
    cordova = tryRequire('cordova'),
    res = tryRequire('./lib/resources'),
    hooks = tryRequire('./lib/hooks');

cordova.on('results', console.log);
cordova.on('log', console.log);
cordova.on('warn', console.warn);
cordova.on('verbose', console.log);

// Custom hooks
cordova.on('after_prepare', hooks.afterPrepare);
cordova.on('after_compile', hooks.afterCompile);
// Track when prepare is run.
cordova.on('before_prepare', function () {
    hooks.beforePrepare();
});

// Performance markers. Set writeOutPerfReport to true to write out perf report.
var perfMarkers = new Array();
var writeOutPerfReport = false;

// Parse build settings
var workingDirAtLaunch = process.cwd();
var BuildSettings = tryRequire('./lib/BuildSettings');
var settings = new BuildSettings(workingDirAtLaunch, process.argv);
res.init(settings.language);

var plugin = tryRequire('./lib/plugin'),
    util = tryRequire('./lib/util'),
    rimraf = tryRequire('rimraf');

if (settings.cordovaPlatform === null) {
    console.error(res.getString('UnsupportedPlatform', settings.platform));
    process.exit(1);
}
if (settings.buildCommand !== 'build' && settings.buildCommand !== 'prepare') {
    console.error(res.getString('UnsupportedBuildCommand', settings.buildCommand));
    process.exit(1);
}

settings.writeToConsole();
util.init(settings);

var isBuild = (settings.buildCommand === 'build');

if (isBuild && settings.platform === 'iOS') {
    settings.requireRunPreparePlatform = false;
}

var noOp = function () { };
try {
    Q(util.createDirectoryIfNecessary(settings.bldDir)).
    then(function () { process.chdir(settings.bldDir); }).
    then(validateConfigXmlSync).
    then(createAppIfNecessary).
    then(function () { process.chdir(settings.cordovaAppDir); }).
    then(isBuild ? updateWww : updateConfigXmlSync).
    then(isBuild ? updateRes : noOp).
    then(isBuild ? copyPlatformMergeFiles : noOp).
    then(updatePlatform).
    then(isBuild ? copyNativeFiles : noOp).
    then(updatePlugins).
    then(preparePlatform).
    then(isBuild ? prepareIconsAndSplashscreens : noOp).
    then(isBuild ? copyBuildInfo : noOp).
    then(isBuild ? buildPlatform : noOp).
    then(isBuild ? copyBackToProject : noOp).
    then(isBuild ? copyAppxOutput : noOp).
    then(writeOutPerfReport ? writePerfReport : noOp).
    fail(function (err) {
        util.writeErrorAndExit(1, err.toString());
    }).
    done();
} catch (e) {
    util.writeErrorAndExit(1, res.getString('BuildError', e.message));
}

function tryRequire(name) {
    if (moduleExists(name)) {
        return require(name);
    }
    else {
        // If we can't load resources containing a proper error message, throw a hardcoded string. The content
        // of the fwlink should still be localized.
        if (res && res.getString) {
            console.error(res.getString('ModuleRequireError'));
            process.exit();
        }
        else {
            console.error('ERROR: A module failed to load. Please try clearing the Cordova cache by using Tools > Options > Tools for Apache Cordova > Cordova Tools > Clear Cordova Cache. Alternatively, for details on how to reinstall vs-mda, see http://go.microsoft.com/fwlink/?LinkID=522541');
            process.exit();
        }
    }
}

function moduleExists(name) {
    try {
        require.resolve(name);
        return true;
    }
    catch (e) {
        return false;
    }
}

function prepareIconsAndSplashscreens() {
    util.markPerf(perfMarkers, 'prepareIconsAndSplashscreens');
    
    console.info(res.getString('CopyingIconsAndSplashscreens', settings.cordovaPlatform));
    var icons = path.join('res', 'icons', settings.cordovaPlatform);
    var splash = path.join('res', 'screens', settings.cordovaPlatform);
    var to;
    if (settings.cordovaPlatform == 'windows') {
        // We need to be backward compatible with old project templates that used 'windows8'
        if (!fs.existsSync(icons)) {
            icons = path.join('res', 'icons', 'windows8');
        }
        if (!fs.existsSync(splash)) {
            splash = path.join('res', 'screens', 'windows8');
        }
        to = path.join('platforms', settings.cordovaPlatform, 'images');
        
        return util.copyRecursive(icons, to, false, []).then(function () {
            return util.copyRecursive(splash, to, false, []);
        });
    }
    else if (settings.cordovaPlatform == 'wp8') {
        to = path.join('platforms', settings.cordovaPlatform);
        
        return util.copyRecursive(icons, to, false, []).then(function () {
            return util.copyRecursive(splash, to, false, []);
        });
    }
    else if (settings.cordovaPlatform == 'android') {
        to = path.join('platforms', settings.cordovaPlatform, 'res');
        util.updateOrRemoveTargetFile(path.join(icons, 'icon-36-ldpi.png'), path.join(to, 'drawable-ldpi', 'icon.png'));
        util.updateOrRemoveTargetFile(path.join(icons, 'icon-48-mdpi.png'), path.join(to, 'drawable-mdpi', 'icon.png'));
        util.updateOrRemoveTargetFile(path.join(icons, 'icon-72-hdpi.png'), path.join(to, 'drawable-hdpi', 'icon.png'));
        util.updateOrRemoveTargetFile(path.join(icons, 'icon-96-xhdpi.png'), path.join(to, 'drawable-xhdpi', 'icon.png'));
        util.updateOrRemoveTargetFile(path.join(icons, 'icon-96-xhdpi.png'), path.join(to, 'drawable', 'icon.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-xhdpi-landscape.png'), path.join(to, 'drawable-land-xhdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-hdpi-landscape.png'), path.join(to, 'drawable-land-hdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-mdpi-landscape.png'), path.join(to, 'drawable-land-mdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-ldpi-landscape.png'), path.join(to, 'drawable-land-ldpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-xhdpi-portrait.png'), path.join(to, 'drawable-port-xhdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-hdpi-portrait.png'), path.join(to, 'drawable-port-hdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-mdpi-portrait.png'), path.join(to, 'drawable-port-mdpi', 'screen.png'));
        util.updateOrRemoveTargetFile(path.join(splash, 'screen-ldpi-portrait.png'), path.join(to, 'drawable-port-ldpi', 'screen.png'));
    }
    
    return Q();
}

function isPlatformLocallySupported(platformArg) {
    return platformArg !== 'ios' || process.platform === 'darwin';
}

function createAppIfNecessary() {
    util.markPerf(perfMarkers, 'createAppIfNecessary');
    
    if (!fs.existsSync(path.join(settings.cordovaAppDir, 'www'))) {
        console.info(res.getString('CreatingApp', settings.cordovaAppDir));
        return cordova.raw.create(settings.cordovaAppDir);
    } else {
        console.info(res.getString('AppDirAlreadyExists', settings.cordovaAppDir));
    }
}

function updateWww() {
    util.markPerf(perfMarkers, 'updateWww');
    
    console.info(res.getString('CopyingAppFilesToWww'));
    
    var fileNameEndingExclusions = util.getDefaultFileNameEndingExclusions().concat([settings.projectSourceDir + '/AppPackages']);
    
    return util.copyRecursive(settings.projectSourceDir, 'www', true, fileNameEndingExclusions)
        .then(function () {
        return util.moveRecursive(path.join('www', 'config.xml'), 'config.xml', false);
    })
        .then(function () {
        console.info(res.getString('DoneCopyingAppFilesToWww'));
    });
}

// For Ripple we do not need to copy all www files. Just deal with the config.xml file.
function updateConfigXmlSync() {
    util.markPerf(perfMarkers, 'updateConfigXmlSync');
    
    var buf = fs.readFileSync(path.join(settings.projectSourceDir, 'config.xml'));
    fs.writeFileSync('config.xml', buf);
}

function validateConfigXmlSync() {
    util.markPerf(perfMarkers, 'validateConfigXmlSync');
    
    var configXmlPath = path.join(settings.projectSourceDir, 'config.xml');
    if (fs.existsSync(configXmlPath)) {
        var doc = util.parseElementtreeSync(configXmlPath);
        var nameElement = doc.find('name');
        var name = (nameElement && nameElement.text) || '';
        var re = /^\s*(((((\d+>)?[a-zA-Z]?:[^:]*)|([^:]*)):)|())(()|([^:]*? ))(error|warning)( \s*[^: ]*)?\s*:.*$/gi
        if (name.match(re)) {
            throw new Error(res.getString('ConfigXmlInvalidNameElement', name));
        }
    }
}

function updateRes() {
    util.markPerf(perfMarkers, 'updateRes');
    
    console.info(res.getString('CopyingResFiles'));
    var from = path.join(settings.projectSourceDir, 'res');
    if (fs.existsSync(from)) {
        var to = 'res';
        util.createDirectoryIfNecessary(to);
        return util.copyRecursive(from, to, true)
                .then(function () {
            console.info(res.getString('DoneCopyingResFiles'));
        });
    } else {
        console.info(res.getString('NoResFilesToCopy', from));
    }
}

function updatePlatform() {
    util.markPerf(perfMarkers, 'updatePlatform');
    
    var cordovaPlatform = settings.cordovaPlatform;
    
    if (!isBuild && cordovaPlatform === 'ios') {
        console.info(res.getString('PreparingRippleForiOS'));
        cordovaPlatform = 'android';
    }
    
    if (isPlatformLocallySupported(cordovaPlatform)) {
        if (!fs.existsSync(path.join('platforms', cordovaPlatform))) {
            if (cordovaPlatform === 'wp8') {
                cordovaPlatform = 'wp8@3.7.1';
            }

            console.info(res.getString('AddingPlatform', cordovaPlatform));
            return cordova.raw.platform('add', cordovaPlatform);
        } else {
            console.info(res.getString('PlatformAlreadyExists', cordovaPlatform));
        }
    }
}

function updatePlugins() {
    util.markPerf(perfMarkers, 'updatePlugins');
    
    console.info(res.getString('UpdatingPlugins'));
    var promisePluginOperations = Q();
    
    var pluginCordovaPlatform = settings.cordovaPlatform;
    
    if (!isBuild && pluginCordovaPlatform === 'ios') {
        pluginCordovaPlatform = 'android';
    }
    
    plugin.init(settings, pluginCordovaPlatform);
    
    // read /plugins/platform.json
    // get "installed_plugins" (IPs) and "dependent_plugins" (DPs)
    // foreach IP in IPs
    //   parse "version" out of /plugins/IP/package.json
    // get list of plugins from config.xml (CPs)
    // remove plugins from IPs whose name@version is not in CPs
    // add CPs that are not in IPs or the DPs

    var localPlugins = [];
    var localNames = [];
    var plugins = plugin.parsePluginsFromConfigSync(path.join(settings.projectSourceDir, 'config.xml'));
    promisePluginOperations = promisePluginOperations.then(function () {
        return plugin.updateLocalPlugins(localPlugins, localNames, plugins);
    });
    
    // Installing local plugins has to happen completely before moving on
    promisePluginOperations = promisePluginOperations.then(function () {
        var dependentPlugins = [];
        var dependentNames = [];
        var installedPlugins = [];
        var installedNames = [];
        var result = Q();
        
        plugin.parseInstalledPlugins(installedPlugins, installedNames, dependentPlugins, dependentNames);
        
        console.info(res.getString('CurrentInstalledPlugins', installedPlugins.toString()));
        console.info(res.getString('CurrentDependentPlugins', dependentPlugins.toString()));
        console.info(res.getString('CurrentConfiguredPlugins', plugins.plugins.toString()));
        
        installedPlugins.forEach(function (p) {
            var pluginNameWithoutVersion = plugin.stripVersionFromPluginName(p);
            
            if (plugins.plugins.indexOf(p) === -1 &&
                plugins.plugins.indexOf(pluginNameWithoutVersion) === -1 &&
                localPlugins.indexOf(p) === -1 &&
                localNames.indexOf(pluginNameWithoutVersion) === -1) {
                result = result.then(function () {
                    console.info(res.getString('RemovingPlugin', pluginNameWithoutVersion));
                    return plugin.removePlugin(pluginNameWithoutVersion);
                });
            }
        });
        
        plugins.plugins.forEach(function (p) {
            var thisParam = plugins.params.shift();
            var pluginNameWithoutVersion = plugin.stripVersionFromPluginName(p);
            // If the user doesn't have a version number in the config.xml file, we should detect
            // a match even if we have a version number for the installed one.  Match p from
            // the config.xml against the list with and without versions.
            if (installedPlugins.indexOf(p) === -1 && dependentPlugins.indexOf(p) === -1 &&
                localPlugins.indexOf(p) === -1 && 
                (p.indexOf('@') !== -1 || (installedNames.indexOf(pluginNameWithoutVersion) === -1 && dependentNames.indexOf(pluginNameWithoutVersion) === -1 &&
                localNames.indexOf(pluginNameWithoutVersion) === -1))) {
                result = result.then(function () {
                    console.info(res.getString('AddingPlugin', p));
                    if (thisParam) {
                        var options = new Array();
                        thisParam.forEach(function (param) {
                            options[options.length] = '--variable';
                            options[options.length] = param;
                        });
                        return cordova.raw.plugin('add', p, { options: options });
                    } else {
                        return cordova.raw.plugin('add', p);
                    }
                });
            }
        });
        
        return result;
    });
    
    return promisePluginOperations;
}

function copyPlatformMergeFiles() {
    util.markPerf(perfMarkers, 'copyPlatformMergeFiles');
    
    util.createDirectoryIfNecessary('merges');
    
    var from = path.join(settings.projectSourceDir, 'merges', settings.cordovaPlatform);
    
    // We need to support the previous 'windows8' merges folder for windows platform as well
    if (!fs.existsSync(from) && settings.cordovaPlatform == 'windows') {
        from = path.join(settings.projectSourceDir, 'merges', 'windows8');
    }
    
    if (!fs.existsSync(from)) {
        return Q();
    }
    var to = path.join('merges', settings.cordovaPlatform);
    
    // The new 'windows' platform still uses 'windows8' for the merges directory
    // BUG: https://msopentech.visualstudio.com/DefaultCollection/Cordova%20-%20Issues/_workitems#_a=edit&id=622
    if (settings.cordovaPlatform == 'windows') {
        to = path.join('merges', 'windows8');
    }
    
    console.info(res.getString('CopyingPlatformMergeFiles', from, to));
    
    return util.copyRecursive(from, to, true)
        .then(function () {
        console.info(res.getString('DoneCopyingPlatformMergeFiles', to));
    });
}

function copyNativeFiles() {
    util.markPerf(perfMarkers, 'copyNativeFiles');
    
    if (isPlatformLocallySupported(settings.cordovaPlatform)) {
        var from = path.join(settings.projectSourceDir, 'res', 'native', settings.cordovaPlatform);
        if (!fs.existsSync(from)) {
            // If res -> native folder isn't here then it could be a project that was created when
            // the res -> cert folder still existed, so check for that location as well.
            from = path.join(settings.projectSourceDir, 'res', 'cert', settings.cordovaPlatform);
            if (!fs.existsSync(from)) {
                return Q();
            }
        }
        
        var to = path.join('platforms', settings.cordovaPlatform);
        console.info(res.getString('CopyingNativeFiles', from, to));
        
        return util.copyRecursive(from, to, false)
            .then(function () {
            console.info(res.getString('DoneCopyingNativeFiles', to));
        });
    }
}


function copyBuildInfo() {
    util.markPerf(perfMarkers, 'copyBuildInfo');
    
    try {
        
        if (settings.cordovaPlatform === 'android') {
            var vsBuildInfoSrc = path.join(settings.platformConfigurationBinDir, 'VSBuildInfo.xml');
            if (fs.existsSync(vsBuildInfoSrc)) {
                var vsBuildInfoDest = path.join('platforms', settings.cordovaPlatform, 'assets', 'www', 'VSBuildInfo.xml');
                util.moveRecursive(vsBuildInfoSrc, vsBuildInfoDest);
            }
        }
        
        if (settings.cordovaPlatform === 'windows') {
            var vsBuildInfoSrc = path.join(settings.platformConfigurationBinDir, 'Microsoft.AppxPackage.Metadata.Overrides.props');
            if (fs.existsSync(vsBuildInfoSrc)) {
                var vsBuildInfoDest = path.join('platforms', settings.cordovaPlatform, 'Microsoft.AppxPackage.Metadata.Overrides.props');
                util.moveRecursive(vsBuildInfoSrc, vsBuildInfoDest);
            }
        }
    }
    catch (ex) {
    }
}

function buildPlatform() {
    util.markPerf(perfMarkers, 'buildPlatform');
    
    if (isPlatformLocallySupported(settings.cordovaPlatform)) {
        console.info(res.getString('BuildingPlatform', settings.cordovaPlatform));
        
        var configurationOptions = '--debug';
        console.info(settings.configuration);
        if (settings.configuration.search(/^Release$/i) !== -1 || settings.configuration.search(/^Distribution/i) !== -1) {
            configurationOptions = '--release';
        }
        
        var buildOptions = '';
        if (settings.platform == 'Windows-AnyCPU') {
            buildOptions = '--archs=anycpu';
        } else if (settings.platform == 'Windows-x64') {
            buildOptions = '--archs=x64';
        } else if (settings.platform == 'Windows-x86') {
            buildOptions = '--archs=x86';
        } else if (settings.platform == 'Windows-ARM') {
            buildOptions = '--archs=arm';
        } else if (settings.cordovaPlatform === 'android') {
            // Set the build to use ant by default
            buildOptions = '--ant';
        }
        
        // Set the target flag to --phone if WP8.1 and --win if Windows
        var windowsTargetOptions = '';
        if (settings.isPlatformPhone81()) {
            windowsTargetOptions = '--phone';
        } else if (settings.cordovaPlatform == 'windows') {
            windowsTargetOptions = '--win';
        }
        
        console.info(res.getString('BuildConfigurationOptions', configurationOptions));
        // build does a prepare, which we don't need because we already called it via 'platform add' or preparePlatform.
        return cordova.raw.compile({ platforms: [settings.cordovaPlatform], options: [configurationOptions, buildOptions, windowsTargetOptions] });
    } else if (settings.buildServerUrl) {
        var remoteBuild = tryRequire('./lib/remoteBuild');
        return remoteBuild.build(settings);
    } else {
        throw new Error(res.getString('RemoteBuildServerNotConfigured'));
    }
}

function preparePlatform() {
    util.markPerf(perfMarkers, 'preparePlatform');
    
    if (!settings.requireRunPreparePlatform) {
        return Q();
    }
    
    console.info(res.getString('PreparingPlatform', settings.cordovaPlatform));
    var platformToPrepare = settings.cordovaPlatform;
    
    if (settings.isRipple() && platformToPrepare === 'ios') {
        platformToPrepare = 'android';
    }
    
    return Q.fcall(function () {
        
        // Used for local Ripple builds. www is renamed to _www because we want the cordova prepare step to be as fast as possible and
        // we only care about what cordova prepare does with plugins for our Ripple build process.
        if (settings.isRipple()) {
            if (fs.existsSync('_www')) {
                rimraf.sync('_www');
            }
            if (fs.existsSync('_merges')) {
                rimraf.sync('_merges');
            }
            
            if (fs.existsSync('www')) {
                fs.renameSync('www', '_www');
            }
            fs.mkdirSync('www');
            if (fs.existsSync('merges')) {
                fs.renameSync('merges', '_merges');
            }
            fs.mkdirSync('merges');
        }
    }).
    then(function () {
        return cordova.raw.prepare({ platforms: [platformToPrepare] });
    }).
    then(function () {
        // Revert the changes for ripple.
        if (settings.isRipple()) {
            rimraf.sync('www');
            fs.renameSync('_www', 'www');
            if (fs.existsSync('_merges')) {
                rimraf.sync('merges');
                fs.renameSync('_merges', 'merges');
            }
        }
    });
}

function copyBackToProject() {
    util.markPerf(perfMarkers, 'copyBackToProject');
    
    console.info(res.getString('CopyingBackToProject', settings.platform));
    
    var copySrc;
    var copyDest = settings.platformConfigurationBinDir;
    util.createDirectoryIfNecessary(copyDest);
    
    if (settings.cordovaPlatform === 'wp8') {
        copySrc = path.join('platforms', settings.cordovaPlatform, 'bin', settings.cordovaConfiguration);
    } else if (settings.cordovaPlatform === 'windows') {
        if (settings.isPlatformPhone81()) {
            copySrc = path.join('platforms', settings.cordovaPlatform, 'build', 'phone', settings.cordovaConfiguration, 'anycpu');
        } else {
            // Adding a plugin with native code will change the build path by adding x64, x86, or ARM.
            // Because of this you can end up with more than one bld path.  The destination
            // directory for this copy is always the same, so just copy the most recent
            
            var directory = util.getWindowsTargetVersion(settings.projectSourceDir);
            
            var src1 = path.join('platforms', settings.cordovaPlatform, 'build', directory, settings.cordovaConfiguration, 'anycpu');
            var src2 = path.join('platforms', settings.cordovaPlatform, 'build', directory, settings.cordovaConfiguration, 'x64');
            var src3 = path.join('platforms', settings.cordovaPlatform, 'build', directory, settings.cordovaConfiguration, 'x86');
            var src4 = path.join('platforms', settings.cordovaPlatform, 'build', directory, settings.cordovaConfiguration, 'ARM');
            var transform = function (s) { return path.join(s, 'AppxManifest.xml'); };
            
            var sources = [src1, src2, src3, src4];
            copySrc = findLatestPath(sources, transform);
        }
    } else if (settings.cordovaPlatform === 'android') {
        copySrc = path.join('platforms', settings.cordovaPlatform, 'ant-build');
    } else {
        return;
    }
    
    return util.copyRecursive(copySrc, copyDest, true, []).then(function () {
        
        if (settings.cordovaPlatform === 'windows') {
            
            console.info(res.getString('CopyingPkgInfoTextFile'));
            
            // Transform generated _pkginfo.txt file
            
            var pkginfoPath = path.join('platforms', settings.cordovaPlatform, 'build', settings.isPlatformPhone81() ? 'phone' : util.getWindowsTargetVersion(settings.projectSourceDir), 'bld', '_pkginfo.txt');
            var pkginfoTargetPath = path.join(settings.binDir, settings.platform, '_pkginfo.txt');

            // Read generated _pkginfo.txt file
            if (fs.existsSync(pkginfoPath)) {
                var platformData = util.parsePlatformValuesFromConfigSync(path.join(settings.projectSourceDir, 'config.xml'), 'windows');
                if (platformData['packageOutputPath']) {
                    var pkgInfoContent = fs.readFileSync(pkginfoPath, { "encoding": "utf-8" });
                    var translatedPath = path.join(platformData['packageOutputPath'], path.basename(path.dirname(pkgInfoContent)), path.basename(pkgInfoContent));
                    fs.writeFileSync(pkginfoTargetPath, translatedPath);
                }
            }
            
            var lastOutDirValues = [
                path.join(settings.projectSourceDir, 'bld', settings.configuration, 'platforms', settings.cordovaPlatform, 'bin', settings.cordovaConfiguration),
                path.join(settings.projectSourceDir, 'bld', settings.configuration, 'platforms', settings.cordovaPlatform, 'bin', 'x86', settings.cordovaConfiguration),
                path.join(settings.projectSourceDir, 'bld', settings.configuration, 'platforms', settings.cordovaPlatform, 'bin', 'x64', settings.cordovaConfiguration),
                path.join(settings.projectSourceDir, 'bld', settings.configuration, 'platforms', settings.cordovaPlatform, 'bin', 'ARM', settings.cordovaConfiguration)];
            
            var outDirFilePath = path.join(settings.binDir, settings.platform, '_outdir.txt');
            var lastOutDirValue = findLatestPath(lastOutDirValues);
            
            if (lastOutDirValue) {
                console.info(res.getString('WritingFromTo', lastOutDirValue, outDirFilePath));
                fs.writeFileSync(outDirFilePath, lastOutDirValue);
            }
        }

    }).then(function () {
        console.info(res.getString('DoneCopyingCompiledFiles', settings.platform));
    }).then(function () {
        if (settings.cordovaPlatform === 'windows') {
            var directory = util.getWindowsTargetVersion(settings.projectSourceDir);
            var cordovaAppxPath = path.join(copyDest, 'CordovaApp.' + directory + '.build.appxrecipe');
            var projectAppxPath = path.join(copyDest, settings.projectName + '.build.appxrecipe');
            console.info(res.getString('CheckingFor', cordovaAppxPath));
            if (fs.existsSync(cordovaAppxPath)) {
                console.info(res.getString('RenamingFromTo', cordovaAppxPath, projectAppxPath));
                fs.renameSync(cordovaAppxPath, projectAppxPath);
            }
        }
    });
}

function findLatestPath(paths, transform) {
    var latestDate = null;
    var latestPath = null;
    for (var i = 0; i < paths.length; i++) {
        var transformedPath = transform ? transform(paths[i]) : paths[i];
        if (fs.existsSync(transformedPath)) {
            var stat = fs.statSync(transformedPath);
            if (!latestDate ||
                stat.mtime.getTime() > latestDate.getTime()) {
                latestDate = stat.mtime;
                latestPath = paths[i];
            }
        }
    }
    
    return latestPath;
}

function copyAppxOutput() {
    util.markPerf(perfMarkers, 'copyAppxOutput');
    
    if (settings.cordovaPlatform === 'windows') {
        console.info(res.getString('CopyingAppxFiles'));
        var platformData = util.parsePlatformValuesFromConfigSync(path.join(settings.projectSourceDir, 'config.xml'), 'windows');
        var packageOutputPath = platformData['packageOutputPath'];
        if (!platformData || !packageOutputPath) {
            console.info(res.getString('NoAppxPackageOutputPath'));
            return Q();
        }
        
        var appxPaths = getAppxPaths();
        util.createDirectoryIfNecessary(packageOutputPath);
        console.info(res.getString('CopyingAppxFilesFromTo', appxPaths['cordovaPackagePath'], packageOutputPath));
        // copy .appxupload file
        return util.copyRecursive(path.join(appxPaths['cordovaPackagePath'], appxPaths['appxUploadFileName']), path.join(packageOutputPath, appxPaths['appxUploadFileName']), false).then(function () {
            // copy package folder
            util.copyRecursive(path.join(appxPaths['cordovaPackagePath'], appxPaths['appxPackagePath']), path.join(packageOutputPath, appxPaths['appxPackagePath']), false).then(function () {
                console.info(res.getString('DoneCopyingAppxFiles'));
            });
        });
    } else {
        // Nothing to do if not windows
        return Q();
    }
}

function getAppxPaths() {
    var paths = {};
    
    var isDebug = (settings.configuration.search(/^Release$/i) === -1 && settings.configuration.search(/^Distribution$/i) === -1);
    var cordovaPackagePath = path.join(settings.cordovaAppDir, 'platforms', 'windows', 'AppPackages');
    
    var appxBasePaths = [];
    var version = getAppliedVersion();
    var suffixList = [
        '_AnyCPU',
        '_x64',
        '_x86',
        '_ARM',
        ''];
    
    var windowsSubPlatformString = '.' + util.getWindowsTargetVersion(settings.projectSourceDir);
    if (settings.isPlatformPhone81()) {
        windowsSubPlatformString = '.Phone';
    }
    
    suffixList.forEach(function (s) {
        var appxBasePath = 'CordovaApp' + windowsSubPlatformString + '_' + version + s;
        if (isDebug) {
            appxBasePath += '_Debug';
        }
        appxBasePaths.push(appxBasePath);
    });

    var appxBase;
    if (settings.isPlatformPhone81()) {
        appxBase = findLatestPath(appxBasePaths, function (s) { return path.join(cordovaPackagePath, s + '_AnyCPU_bundle.appxupload'); });
    } else {
        appxBase = findLatestPath(appxBasePaths, function (s) { return path.join(cordovaPackagePath, s + '.appxupload'); });
    }

    paths['cordovaPackagePath'] = cordovaPackagePath;
    paths['appxPackagePath'] = appxBase + '_Test';
    paths['appxFileName'] = appxBase + '.appx';
    if (settings.isPlatformPhone81()) {
        paths['appxUploadFileName'] = appxBase + '_AnyCPU_bundle.appxupload';
    } else {
        paths['appxUploadFileName'] = appxBase + '.appxupload';
    }
    
    return paths;
}

function getAppliedVersion() {
    var directory = util.getWindowsTargetVersion(settings.projectSourceDir);
    var manifest_path = path.join(settings.cordovaAppDir, 'platforms', 'windows', 'package.' + directory + '.appxmanifest');
    var manifest = util.parseElementtreeSync(manifest_path);
    
    var identityNode = manifest.find('.//Identity');
    if (identityNode) {
        return identityNode['attrib']['Version'];
    }
    
    return '';
}

function writePerfReport() {
    util.markPerf(perfMarkers, 'done');
    console.info(res.getString('PerformanceSummary'));
    console.info(util.generatePerfReport(perfMarkers));
    console.info('-----------------------------------');
}

// SIG // Begin signature block
// SIG // MIIamQYJKoZIhvcNAQcCoIIaijCCGoYCAQExCzAJBgUr
// SIG // DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
// SIG // gjcCAR4wJAIBAQQQEODJBs441BGiowAQS9NQkAIBAAIB
// SIG // AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFBe3BVAEC22I
// SIG // e+HLTOpUfdZuXAPQoIIVgjCCBMMwggOroAMCAQICEzMA
// SIG // AABiQS/HTYquEyYAAAAAAGIwDQYJKoZIhvcNAQEFBQAw
// SIG // dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE1MDIxMDE4
// SIG // MzMzN1oXDTE2MDUxMDE4MzMzN1owgbMxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjpDMEY0LTMwODYtREVGODEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAM6XKRJ4zoNennwqDo1pk8XuDTmndO5I/hjZQBm9
// SIG // Hnpe3KaV+uLhj3FL7zj0gJsYXqk4zNjwRLRxjao6g+jO
// SIG // 0kxzOYbFSdHVrCvuShGPCGyGByMSSazcheawyyd5SpSh
// SIG // VaNZoJ/6GTOHDAoH6JCzmsoyL8sbiSBaxW6Tvpxfj4bi
// SIG // NzGE/pbBynYNhKwjRdGNyjb5g7T/VwYkSohku6VZSgeK
// SIG // GrngfveHLMHquy161E6znD/GuoUSszao0eKQHMm8L+dP
// SIG // AeKLSvo215ZhNpXbBMrLvZsIzdX8g1Up1oXqBmYl8N6c
// SIG // RvRXnl7DpDS4m07VFa45HKIauob2++6uHXKO3p0CAwEA
// SIG // AaOCAQkwggEFMB0GA1UdDgQWBBSbLohV2xRd2sjC7YPY
// SIG // +Wh+g6E5xzAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
// SIG // syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
// SIG // AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
// SIG // ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
// SIG // AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQAMrc708POf
// SIG // TeyuuFTM5p4VxleGTnjJ5/wCYKjlBrCK1aprYaKrHKiq
// SIG // vX0p490JQt5MlxSA+0uvRprw38pQP5ruh0ntJsrYPLL2
// SIG // 2Lu6emq0FnvKtdpHWoEtZBTwalMkshMeaXSNK/vVno1v
// SIG // fJTYmODzYKKnbxWWlOH6dbbGyfH+qyWe1LVQizmB2w75
// SIG // YVNC4yqWwoGdFZUeCpNUlLnJcbSFRE6R0uU6AtRM0ESB
// SIG // i7L5DsYO6Sn/zJLhjOEeHWCFWaT0GC3k29KNIXZ113s9
// SIG // c2vWvc2mv4pil8oled89ZaBhVVWKhwJ2JwjMOTNeqFnS
// SIG // nhuzmk/qhUC+WitEmqGUh6brMIIE7DCCA9SgAwIBAgIT
// SIG // MwAAAMps1TISNcThVQABAAAAyjANBgkqhkiG9w0BAQUF
// SIG // ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xNDA0
// SIG // MjIxNzM5MDBaFw0xNTA3MjIxNzM5MDBaMIGDMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
// SIG // VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCWcV3tBkb6
// SIG // hMudW7dGx7DhtBE5A62xFXNgnOuntm4aPD//ZeM08aal
// SIG // IV5WmWxY5JKhClzC09xSLwxlmiBhQFMxnGyPIX26+f4T
// SIG // UFJglTpbuVildGFBqZTgrSZOTKGXcEknXnxnyk8ecYRG
// SIG // vB1LtuIPxcYnyQfmegqlFwAZTHBFOC2BtFCqxWfR+nm8
// SIG // xcyhcpv0JTSY+FTfEjk4Ei+ka6Wafsdi0dzP7T00+Lnf
// SIG // NTC67HkyqeGprFVNTH9MVsMTC3bxB/nMR6z7iNVSpR4o
// SIG // +j0tz8+EmIZxZRHPhckJRIbhb+ex/KxARKWpiyM/gkmd
// SIG // 1ZZZUBNZGHP/QwytK9R/MEBnAgMBAAGjggFgMIIBXDAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUH17i
// SIG // XVCNVoa+SjzPBOinh7XLv4MwUQYDVR0RBEowSKRGMEQx
// SIG // DTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1K2I0
// SIG // MjE4ZjEzLTZmY2EtNDkwZi05YzQ3LTNmYzU1N2RmYzQ0
// SIG // MDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoK
// SIG // HzBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWND
// SIG // b2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUH
// SIG // AQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
// SIG // QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOC
// SIG // AQEAd1zr15E9zb17g9mFqbBDnXN8F8kP7Tbbx7UsG177
// SIG // VAU6g3FAgQmit3EmXtZ9tmw7yapfXQMYKh0nfgfpxWUf
// SIG // tc8Nt1THKDhaiOd7wRm2VjK64szLk9uvbg9dRPXUsO8b
// SIG // 1U7Brw7vIJvy4f4nXejF/2H2GdIoCiKd381wgp4Yctgj
// SIG // zHosQ+7/6sDg5h2qnpczAFJvB7jTiGzepAY1p8JThmUR
// SIG // dwmPNVm52IaoAP74MX0s9IwFncDB1XdybOlNWSaD8cKy
// SIG // iFeTNQB8UCu8Wfz+HCk4gtPeUpdFKRhOlludul8bo/En
// SIG // UOoHlehtNA04V9w3KDWVOjic1O1qhV0OIhFeezCCBbww
// SIG // ggOkoAMCAQICCmEzJhoAAAAAADEwDQYJKoZIhvcNAQEF
// SIG // BQAwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmS
// SIG // JomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // MB4XDTEwMDgzMTIyMTkzMloXDTIwMDgzMTIyMjkzMlow
// SIG // eTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWlj
// SIG // cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EwggEiMA0GCSqG
// SIG // SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCycllcGTBkvx2a
// SIG // YCAgQpl2U2w+G9ZvzMvx6mv+lxYQ4N86dIMaty+gMuz/
// SIG // 3sJCTiPVcgDbNVcKicquIEn08GisTUuNpb15S3GbRwfa
// SIG // /SXfnXWIz6pzRH/XgdvzvfI2pMlcRdyvrT3gKGiXGqel
// SIG // cnNW8ReU5P01lHKg1nZfHndFg4U4FtBzWwW6Z1KNpbJp
// SIG // L9oZC/6SdCnidi9U3RQwWfjSjWL9y8lfRjFQuScT5EAw
// SIG // z3IpECgixzdOPaAyPZDNoTgGhVxOVoIoKgUyt0vXT2Pn
// SIG // 0i1i8UU956wIAPZGoZ7RW4wmU+h6qkryRs83PDietHdc
// SIG // pReejcsRj1Y8wawJXwPTAgMBAAGjggFeMIIBWjAPBgNV
// SIG // HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTLEejK0rQWWAHJ
// SIG // Ny4zFha5TJoKHzALBgNVHQ8EBAMCAYYwEgYJKwYBBAGC
// SIG // NxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU/dExTtMm
// SIG // ipXhmGA7qDFvpjy82C0wGQYJKwYBBAGCNxQCBAweCgBT
// SIG // AHUAYgBDAEEwHwYDVR0jBBgwFoAUDqyCYEBWJ5flJRP8
// SIG // KuEKU5VZ5KQwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvbWljcm9zb2Z0cm9vdGNlcnQuY3JsMFQGCCsGAQUF
// SIG // BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRS
// SIG // b290Q2VydC5jcnQwDQYJKoZIhvcNAQEFBQADggIBAFk5
// SIG // Pn8mRq/rb0CxMrVq6w4vbqhJ9+tfde1MOy3XQ60L/svp
// SIG // LTGjI8x8UJiAIV2sPS9MuqKoVpzjcLu4tPh5tUly9z7q
// SIG // QX/K4QwXaculnCAt+gtQxFbNLeNK0rxw56gNogOlVuC4
// SIG // iktX8pVCnPHz7+7jhh80PLhWmvBTI4UqpIIck+KUBx3y
// SIG // 4k74jKHK6BOlkU7IG9KPcpUqcW2bGvgc8FPWZ8wi/1wd
// SIG // zaKMvSeyeWNWRKJRzfnpo1hW3ZsCRUQvX/TartSCMm78
// SIG // pJUT5Otp56miLL7IKxAOZY6Z2/Wi+hImCWU4lPF6H0q7
// SIG // 0eFW6NB4lhhcyTUWX92THUmOLb6tNEQc7hAVGgBd3TVb
// SIG // Ic6YxwnuhQ6MT20OE049fClInHLR82zKwexwo1eSV32U
// SIG // jaAbSANa98+jZwp0pTbtLS8XyOZyNxL0b7E8Z4L5UrKN
// SIG // MxZlHg6K3RDeZPRvzkbU0xfpecQEtNP7LN8fip6sCvsT
// SIG // J0Ct5PnhqX9GuwdgR2VgQE6wQuxO7bN2edgKNAltHIAx
// SIG // H+IOVN3lofvlRxCtZJj/UBYufL8FIXrilUEnacOTj5XJ
// SIG // jdibIa4NXJzwoq6GaIMMai27dmsAHZat8hZ79haDJLmI
// SIG // z2qoRzEvmtzjcT3XAH5iR9HOiMm4GPoOco3Boz2vAkBq
// SIG // /2mbluIQqBC0N1AI1sM9MIIGBzCCA++gAwIBAgIKYRZo
// SIG // NAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZIm
// SIG // iZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWlj
// SIG // cm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBD
// SIG // ZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1
// SIG // MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7d
// SIG // GE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr
// SIG // 6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udO
// SIG // o6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDl
// SIG // KEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd+
// SIG // +NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
// SIG // EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68e
// SIG // eEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiAL
// SIG // AgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0G
// SIG // A1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNV
// SIG // HQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1Ud
// SIG // IwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6Rh
// SIG // MF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJ
// SIG // k/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQ
// SIG // ea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BB
// SIG // hj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
// SIG // bC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmww
// SIG // VAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggr
// SIG // BgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wD
// SIG // RDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxt
// SIG // YrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB
// SIG // 7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
// SIG // KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVR
// SIG // DupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPf
// SIG // wgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4
// SIG // ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGys
// SIG // OUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89D
// SIG // s+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BN
// SIG // Z8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU
// SIG // 2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LB
// SIG // J1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJ
// SIG // Zr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCl
// SIG // eKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/J
// SIG // mu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6
// SIG // L54/LlUWa8kTo/0xggSDMIIEfwIBATCBkDB5MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQQITMwAAAMps1TISNcThVQAB
// SIG // AAAAyjAJBgUrDgMCGgUAoIGcMBkGCSqGSIb3DQEJAzEM
// SIG // BgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgor
// SIG // BgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBS03WG6haK1
// SIG // Pn7J+yIJOAN2ScCMXTA8BgorBgEEAYI3AgEMMS4wLKAO
// SIG // gAwAYQBwAHAALgBqAHOhGoAYaHR0cDovL2V4cHJlc3Np
// SIG // b24vYXBwLmpzMA0GCSqGSIb3DQEBAQUABIIBAHkSj9Bn
// SIG // a7dy06/UrhR9Fyl9J69uj7ssz1KTA232tjipXxHU/+Mj
// SIG // TPrEItiHGrfJyh0VpQDq4AWTOpnW2bZVd24AoyOEmGTY
// SIG // 5BsoiYgYyYZT5uinpVQuYknZ3guys4EBcqkXpXzILxqf
// SIG // xFj9Wbajrt7pX95F1wFBOY73TVuNYtdtSGeDE6fbs3YP
// SIG // fa3aOIT4zQ3sUijBwNmvYOYfH860qS7dtNu1S7PQEQQ/
// SIG // 0GRD7N37m210uByeYIEihT55gpTLphz+JLEpkZe+uufI
// SIG // x3wT9DMeCx2udbKTv+PI5HNNLnRNt3yzrJHRekO/Xwh0
// SIG // /Y742ykTMhERygGOTdO2v01XZ+uhggIoMIICJAYJKoZI
// SIG // hvcNAQkGMYICFTCCAhECAQEwgY4wdzELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBAhMzAAAAYkEvx02KrhMmAAAAAABiMAkG
// SIG // BSsOAwIaBQCgXTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcN
// SIG // AQcBMBwGCSqGSIb3DQEJBTEPFw0xNTAyMjAyMTUzMjFa
// SIG // MCMGCSqGSIb3DQEJBDEWBBSKhC8x1R6fj4GSgrWPBFby
// SIG // MW+nODANBgkqhkiG9w0BAQUFAASCAQA+Pwvzb7OC/SdB
// SIG // 1dKfx5n9b67j8j2JSEdWSSwuYB2ntBSTyWBJtpgasfBa
// SIG // FteN3kWobESWreSBB0qSy3PZEVeEW4+72bzL/GRKi5OH
// SIG // X0a9T29VgpwNBECUs48LTe3GkuNgAh70/uv071OB7i3h
// SIG // h3+oW4eLOh541zmgrefHRnF1xmRVMsjCrqBVsxVdO2XL
// SIG // YNNqfe6Smdd+863j9KyP/50pdzdWODmht62yt8z9SPGk
// SIG // o1aBtu507qOR1+rwN/WcSSM3rwkYUugYRPnw/Bw74S8r
// SIG // WrTarleNcWukWfeoDmTsT8ZsU+xU3v2VWRecDLgmK9cA
// SIG // WhZK7wt2chiF1JgmKpr2
// SIG // End signature block
